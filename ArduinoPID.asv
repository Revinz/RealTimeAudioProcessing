classdef ArduinoPID
    
    properties
        arduino;        
        sensorPin = 'A1';
        
        %Hysterisis thresholds for when the button is being clicked /
        %released
        hysON = 235;
        hysOFF = 100;
        bnDown = false; %Is the button down or not
        
        % Button LED pins
        LED1 = "A2";
        LED2 = "A3";
    end
    
    % HOW TO ARDUINO IN MATLAB
    %   https://se.mathworks.com/help/supportpkg/arduinoio/getting-started-with-matlab-support-package-for-arduino-hardware.html
    %
    %
    % Or use the source code: run once -> right click arduino the the
    % properties list -> click 'Open 'arduino' 
    
    %Error: MATLAB connection to Arduino Uno at COM_ exists in your workspace. To create a new connection, clear the existing
    % object.
    
    % Find 'a' in the variable list (Workspace - should be on the right
    % side) -> right click -> delete.
    
    
    methods
        function obj = ArduinoPID()
            try
            obj.arduino = arduino('COM4', 'uno'); %CHANGE COM NUMBER! You can find it in the device manager
            disp('Arduino connected');
            
            %Setup pins
            obj.arduino.configurePin(obj.sensorPin, 'AnalogInput');
            obj.arduino.configurePin(obj.LED1, 'AnalogOutput');  
            obj.arduino.configurePin(obj.LED2, 'AnalogOutput');
            
            catch
                disp('Arduino NOT connected');
            end
        end
        
        
        function obj = loop(obj) 
            %use this one as Arduino's loop. (It is just being called in the
            %while loop in the Main.m)
            
            %Read Sensor
            SensorVal = obj.arduino.readVoltage("A1") * (1024 / 5); %Read and convert it into a scale from 0 - 1024
            %disp(SensorVal)

            %Hysterisis on the sensor value
            if (SensorVal >= obj.hysON && obj.bnDown == false)
                obj.bnDown = true;
                obj.ClearAll();
            elseif (SensorVal <= obj.hysOFF && obj.bnDown == true)
                obj.bnDown = false;
                writeDigitalPin(obj.arduino, 'A2', 0);
                writeDigitalPin(obj.arduino, 'A3', 0);
                disp("RELEASED")
            end
            
            
            %Read knob value and adjust volume
            
        end
        
        % PLEASE keep the functionality inside methods
        
        function ClearAll(obj)
            global Interactables
            disp("CLICKED")
            writeDigitalPin(obj.arduino, 'A2', 1);
            writeDigitalPin(obj.arduino, 'A3', 1);
            
            index = 1;
            while index <= length(Interactables)
                length(Interactables)
                
                    if isa(Interactables{index}, 'Node')
                        if ~isa(Interactables{index}, 'InputNode') && ~isa(Interactables{index}, 'OutputNode')
                           if Interactables{index}.settingsOpened == false
                                Interactables{index}.openSettings();
                                Interactables{index}.pressDelete();
                           else 
                               Interactables{index}.pressDelete();
                           end
                           length(Interactables)
                           index = 1; %Re
                        end
                    end
                    
                    index = index + 1;
            end
            
%                    writeDigitalPin(a, 'A3', 1);
%                    for j = 1:length(Interactables)
%                        if isa(Interactables{j}, 'FlangerNode') || isa(Interactables{j}, 'LowpassNode') || isa(Interactables{j}, 'DelayNode') || isa(Interactables{j}, 'ReverbNode') || isa(Interactables{j}, 'SpectrumNode')  %Only want to check through nodes, since only nodes have delete buttons in them
%                                if ishandle(Interactables{j}.anno) %Check if the annotion for the delete button exists
%                                      if Interactables{j}.settingsOpened == false                               
%                                          Interactables{j}.openSettings();
%                                      end
%                                      try
%                                          Interactables{j}.pressDelete();
%                                      catch
%                                      end
%                                      break;
%                                end
%                        end
%                    end

        end
        
        function AdjustVolume(obj)
            global output;
            analogKnob = readVoltage(a,'A5');
            output.volume = analogKnob - 4;
             
        end
        
        % Methods used for the example -- Can be deleted.
        function turnOnLED(obj)
            obj.arduino.writeDigitalPin(obj.ledPin, 1);
        end
        
        function turnOffLED(obj)
            obj.arduino.writeDigitalPin(obj.ledPin, 0);
        end
    end
end

